// Code generated by MockGen. DO NOT EDIT.
// Source: app/internal (interfaces: RepositoryProducts)

// Package mocks is a generated GoMock package.
package mocks

import (
	internal "app/internal"
	reflect "reflect"

	"go.uber.org/mock/gomock"
)

// MockRepositoryProducts is a mock of RepositoryProducts interface.
type MockRepositoryProducts struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryProductsMockRecorder
}

// MockRepositoryProductsMockRecorder is the mock recorder for MockRepositoryProducts.
type MockRepositoryProductsMockRecorder struct {
	mock *MockRepositoryProducts
}

// NewMockRepositoryProducts creates a new mock instance.
func NewMockRepositoryProducts(ctrl *gomock.Controller) *MockRepositoryProducts {
	mock := &MockRepositoryProducts{ctrl: ctrl}
	mock.recorder = &MockRepositoryProductsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryProducts) EXPECT() *MockRepositoryProductsMockRecorder {
	return m.recorder
}

// SearchProducts mocks base method.
func (m *MockRepositoryProducts) SearchProducts(arg0 internal.ProductQuery) (map[int]internal.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProducts", arg0)
	ret0, _ := ret[0].(map[int]internal.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProducts indicates an expected call of SearchProducts.
func (mr *MockRepositoryProductsMockRecorder) SearchProducts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProducts", reflect.TypeOf((*MockRepositoryProducts)(nil).SearchProducts), arg0)
}
